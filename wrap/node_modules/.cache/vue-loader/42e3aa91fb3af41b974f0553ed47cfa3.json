{"remainingRequest":"D:\\code\\code2\\sh_19_0722\\code-work\\wrap\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\code\\code2\\sh_19_0722\\code-work\\wrap\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\code\\code2\\sh_19_0722\\code-work\\wrap\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\code2\\sh_19_0722\\code-work\\wrap\\src\\components\\ShopList\\ShopList.vue?vue&type=template&id=75d5604f&scoped=true&","dependencies":[{"path":"D:\\code\\code2\\sh_19_0722\\code-work\\wrap\\src\\components\\ShopList\\ShopList.vue","mtime":1576654140005},{"path":"D:\\code\\code2\\sh_19_0722\\code-work\\wrap\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\code\\code2\\sh_19_0722\\code-work\\wrap\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\code\\code2\\sh_19_0722\\code-work\\wrap\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\code\\code2\\sh_19_0722\\code-work\\wrap\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}